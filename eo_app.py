import streamlit as st
import torch
import torchvision.transforms as transforms
from torchvision import models
from PIL import Image
import numpy as np
import requests
from io import BytesIO
import time
import os

# --- –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ ---
CLASS_NAMES = ['dew', 'fogsmog', 'frost', 'glaze', 'hail', 'lightning',
               'rain', 'rainbow', 'rime', 'sandstorm', 'snow']

CLASS_NAMES_dict = {
    'dew': '–†–æ—Å–∞',
    'fogsmog': '–¢—É–º–∞–Ω',
    'frost': '–ò–∑–º–æ—Ä–æ–∑—å',
    'glaze': '–ì–æ–ª–æ–ª—ë–¥',
    'hail': '–ì—Ä–∞–¥',
    'lightning': '–ú–æ–ª–Ω–∏—è',
    'rain': '–õ–∏–≤–µ–Ω—å, –ø–æ—Ç–æ–ø',
    'rainbow': '–†–∞–¥—É–≥–∞',
    'rime': '–ò–Ω–µ–π',
    'sandstorm': '–ü–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è',
    'snow': '–°–Ω–µ–≥–æ–ø–∞–¥'
}

# --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ---
transform_resnet18 = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

transform_all_another = transforms.Compose([
    transforms.Resize(232),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π ---
model_configs = {
    "ResNet-18": {
        "arch": "resnet18",
        "weights": "models/model_resnet18_weights.pt",
        "transform": transform_resnet18,
        "url": None  # –õ–æ–∫–∞–ª—å–Ω–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    },
    "ResNet-50": {
        "arch": "resnet50",
        "weights": "models/model_resnet50_weights.pt",
        "transform": transform_all_another,
        "url": None
    },
    "ResNet-101": {
        "arch": "resnet101",
        "weights": "models/model_resnet101_weights.pt",
        "transform": transform_all_another,
        "url": "https://huggingface.co/EugeneOss/Weather_ResNet101/resolve/main/model_resnet101_weights.pt"
    },
    "ResNet-152": {
        "arch": "resnet152",
        "weights": "models/model_resnet152_weights.pt",
        "transform": transform_all_another,
        "url": "https://huggingface.co/EugeneOss/Weather_ResNet101/resolve/main/model_resnet152_weights.pt"
    }
}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
def load_model(arch, weight_path, download_url):
    if not os.path.exists(weight_path):
        if download_url is None:
            raise FileNotFoundError(f"–§–∞–π–ª {weight_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ URL –Ω–µ —É–∫–∞–∑–∞–Ω.")
        os.makedirs(os.path.dirname(weight_path), exist_ok=True)
        with open(weight_path, 'wb') as f:
            response = requests.get(download_url)
            response.raise_for_status()
            f.write(response.content)

    model_fn = {
        'resnet18': models.resnet18,
        'resnet50': models.resnet50,
        'resnet101': models.resnet101,
        'resnet152': models.resnet152
    }

    model = model_fn[arch](pretrained=False)
    model.fc = torch.nn.Linear(model.fc.in_features, len(CLASS_NAMES))
    model.load_state_dict(torch.load(weight_path, map_location='cpu'))
    model.eval()
    return model

# --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
def predict(model, image_tensor):
    with torch.no_grad():
        start_time = time.time()
        outputs = model(image_tensor)
        probs = torch.nn.functional.softmax(outputs, dim=1).squeeze()
        top_idx = torch.argmax(probs).item()
        end_time = time.time()
        duration = end_time - start_time
        return CLASS_NAMES[top_idx], probs[top_idx].item(), probs, duration

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="Weather Classification", layout="centered")
st.title("üå§Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø–æ —Ñ–æ—Ç–æ")

# --- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ---
model_choice = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", list(model_configs.keys()))
config = model_configs[model_choice]
arch = config["arch"]
weights = config["weights"]
transform = config["transform"]
url = config["url"]

# --- –ö—ç—à –º–æ–¥–µ–ª–∏ ---
@st.cache_resource
def get_model():
    return load_model(arch, weights, url)

model = get_model()

# --- –°–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
option = st.radio("–°–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–£–∫–∞–∑–∞—Ç—å URL"], horizontal=True)
image = None

if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")

elif option == "–£–∫–∞–∑–∞—Ç—å URL":
    url_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    if url_input:
        try:
            response = requests.get(url_input, timeout=5)
            image = Image.open(BytesIO(response.content)).convert("RGB")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# --- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
if image is not None:
    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
    image_tensor = transform(image).unsqueeze(0)
    pred_class, confidence, all_probs, duration = predict(model, image_tensor)

    st.success(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:** {CLASS_NAMES_dict[pred_class]}")
    st.info(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.4f}")
    st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{duration:.3f} —Å–µ–∫")

    with st.expander("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º"):
        for cls, prob in zip(CLASS_NAMES, all_probs):
            st.write(f"{cls}: {prob:.4f}")
